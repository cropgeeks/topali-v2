/*
 * AnnoDialog.java
 *
 * Created on 21 February 2008, 15:32
 */

package topali.gui.dialog.annotation;

import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import topali.data.*;
import topali.data.annotations.*;
import topali.data.models.*;
import topali.gui.*;
import topali.gui.dialog.ExportDialog;
import topali.i18n.Text;
import topali.var.utils.Utils;

/**
 *
 * @author  dlindn
 */
public class CopyOfAnnotationDialog extends javax.swing.JDialog {
    AlignmentData data;
    Class<? extends Annotation> annoType;
    
    String select = "Partitions";
    
    /** Creates new form AnnoDialog */
    public CopyOfAnnotationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init2();
        pack();
    }
    
    public void init2() {
    	setTitle(Text.get("AnnotationDialog.11"));
        bEdit.setEnabled(false);
        bRemove.setEnabled(false);
        bRemoveAll.setEnabled(false);
        
        annoList.addMouseListener(new MouseAdapter() {

			
			public void mouseClicked(MouseEvent e) {
				super.mouseClicked(e);
				if(e.getClickCount()==2) {
					bEditActionPerformed(null);
				}
			}
        	
        });
        
        annoList.addKeyListener(new KeyAdapter() {

			
			public void keyPressed(KeyEvent e) {
				super.keyPressed(e);
				if (e.getKeyCode() == KeyEvent.VK_DELETE)
				{
					bRemoveActionPerformed(null);
				} else if (e.getKeyCode() == KeyEvent.VK_ENTER)
				{
					bEditActionPerformed(null);
				}
			}
        	
        });
        
        Utils.addCloseHandler(this, bClose);
        
        getRootPane().setDefaultButton(bClose);
    }
    
    public void setData(AlignmentData data) {
    	this.data = data;
    	treePreviewPanel.setAlignmentData(data);
    	refresh();
    }
    
    public void refresh() {
    	String[] annoTypes = new String[] {"Partitions", "Coding Regions"};
    	DefaultComboBoxModel combmod = new DefaultComboBoxModel(annoTypes);
    	annoTypeList.setModel(combmod);
    	
    	
    	int index = 0;
    	Class<? extends Annotation> type = null;
    	if(select.equals("Coding Regions")) {
    		index = 1;
    		type = CodingRegionAnnotation.class;
    		}
    	else {
    		index = 0;
    		type = PartitionAnnotation.class;
    	}
    	
    	Object[] annos = data.getAnnotations().getAnnotations(type).toArray();
    	DefaultListModel listmod = new DefaultListModel();
    	for(Object obj : annos)
    		listmod.addElement(obj);
    	annoList.setModel(listmod);
    	
    	annoTypeList.setSelectedIndex(index);
    	
    	annoType = type;
    	
    	validate();
    }
    
    public void setSelected(Annotation anno) {
    	Class<? extends Annotation> type = anno.getClass();
    	if(type.equals(PartitionAnnotation.class)) {
    		annoTypeList.setSelectedIndex(0);
    		annoTypeListActionPerformed(null);
    		ListModel mod = annoList.getModel();
    		for(int i=0; i<mod.getSize(); i++) {
    			if(mod.getElementAt(i).equals(anno)) {
    				annoList.setSelectedIndex(i);
    				annoListValueChanged(null);
    			}
    		}
    	}
    	else if(type.equals(CodingRegionAnnotation.class)) {
    		annoTypeList.setSelectedIndex(1);
    		annoTypeListActionPerformed(null);
    		ListModel mod = annoList.getModel();
    		for(int i=0; i<mod.getSize(); i++) {
    			if(mod.getElementAt(i).equals(anno)) {
    				annoList.setSelectedIndex(i);
    				annoListValueChanged(null);
    			}
    		}
    	}
    }
    
    public void addPartition(int start, int end) {
    	PartitionAnnotation anno = new PartitionAnnotation(start, end);
    	anno.setSeqType(data.getSequenceSet().getProps().getType());
    	Model modss = data.getSequenceSet().getProps().getModel();
    	Model modanno = ModelManager.getInstance().generateModel(modss.getName(), modss.isGamma(), modss.isInv());
    	anno.setModel(modanno);
    	data.getAnnotations().add(anno);
    	refresh();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        annoTypeList = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        bNew = new javax.swing.JButton();
        bEdit = new javax.swing.JButton();
        bRemove = new javax.swing.JButton();
        bRemoveAll = new javax.swing.JButton();
        bHelp = TOPALiHelp.getHelpButton("partitions_dialog");
        bClose = new javax.swing.JButton();
        bExport = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        annoList = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        disableTreePrev = new javax.swing.JCheckBox();
        treePreviewPanel = new topali.gui.dialog.annotation.TreePreviewPanel();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(topali.i18n.Text.get("AnnotationDialog.1")));

        annoTypeList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        annoTypeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annoTypeListActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(annoTypeList, 0, 262, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(annoTypeList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        bNew.setText(topali.i18n.Text.get("AnnotationDialog.5"));
        bNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewActionPerformed(evt);
            }
        });

        bEdit.setText(topali.i18n.Text.get("AnnotationDialog.6"));
        bEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditActionPerformed(evt);
            }
        });

        bRemove.setText(topali.i18n.Text.get("AnnotationDialog.7"));
        bRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveActionPerformed(evt);
            }
        });

        bRemoveAll.setText(topali.i18n.Text.get("AnnotationDialog.8"));
        bRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveAllActionPerformed(evt);
            }
        });

        bHelp.setText(topali.i18n.Text.get("AnnotationDialog.9"));
        bHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHelpActionPerformed(evt);
            }
        });

        bClose.setText(topali.i18n.Text.get("AnnotationDialog.10"));
        bClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCloseActionPerformed(evt);
            }
        });

        bExport.setText(Text.get("AnnotationDialog.12"));
        bExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExportActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(bNew, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bEdit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bRemove, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bRemoveAll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .add(bExport, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .add(bHelp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .add(bClose, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(bNew)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bEdit)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bRemove)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bRemoveAll)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bExport)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bHelp)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bClose)
                .addContainerGap(311, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(topali.i18n.Text.get("AnnotationDialog.2")));

        annoList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        annoList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                annoListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(annoList);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(topali.i18n.Text.get("AnnotationDialog.3")));

        disableTreePrev.setText(topali.i18n.Text.get("AnnotationDialog.4"));
        disableTreePrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableTreePrevActionPerformed(evt);
            }
        });

        treePreviewPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));

        org.jdesktop.layout.GroupLayout treePreviewPanelLayout = new org.jdesktop.layout.GroupLayout(treePreviewPanel);
        treePreviewPanel.setLayout(treePreviewPanelLayout);
        treePreviewPanelLayout.setHorizontalGroup(
            treePreviewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 260, Short.MAX_VALUE)
        );
        treePreviewPanelLayout.setVerticalGroup(
            treePreviewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 212, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(treePreviewPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(disableTreePrev))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .add(treePreviewPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(disableTreePrev))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void annoTypeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annoTypeListActionPerformed
        String selected = (String)annoTypeList.getSelectedItem();
        if(selected.equals("Partitions")) {
        	select = "Partitions";
            Object[] annos = data.getAnnotations().getAnnotations(PartitionAnnotation.class).toArray();
            DefaultListModel listmod = new DefaultListModel();
            for(Object obj : annos)
                listmod.addElement(obj);
            annoList.setModel(listmod);
            annoType = PartitionAnnotation.class;
            if(listmod.getSize()>0)
            	bRemoveAll.setEnabled(true);
            else
            	bRemoveAll.setEnabled(false);
        } else if(selected.equals("Coding Regions")) {
        	select = "Coding Regions";
            Object[] annos = data.getAnnotations().getAnnotations(CodingRegionAnnotation.class).toArray();
            DefaultListModel listmod = new DefaultListModel();
            for(Object obj : annos)
                listmod.addElement(obj);
            annoList.setModel(listmod);
            annoType = CodingRegionAnnotation.class;
            if(listmod.getSize()>0)
            	bRemoveAll.setEnabled(true);
            else
            	bRemoveAll.setEnabled(false);
        }
        treePreviewPanel.clearTree();
        bEdit.setEnabled(false);
        bRemove.setEnabled(false);
        validate();
    }//GEN-LAST:event_annoTypeListActionPerformed

    private void bNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewActionPerformed
        String selected = (String)annoTypeList.getSelectedItem();
        if(selected.equals("Partitions")) {
            EditPartAnnoDialog dlg = new EditPartAnnoDialog(TOPALi.winMain, true);
            dlg.newAnnotation(data);
            dlg.pack();
            dlg.setLocationRelativeTo(this);
            dlg.setVisible(true);
            
            if(!dlg.cancelled) {
                PartitionAnnotation anno = new PartitionAnnotation(dlg.aStart, dlg.aEnd);
                anno.setSeqType(dlg.aType);
                anno.setComment(dlg.aComment);
                if(dlg.aModel!=null)
                	anno.setModel(ModelManager.getInstance().generateModel(dlg.aModel, dlg.aGamma, dlg.aInv));
                data.getAnnotations().add(anno);
                setData(data);
                ProjectState.setDataChanged();
            }
        }
        else if(selected.equals("Coding Regions")) {
        	EditCodRegDialog dlg = new EditCodRegDialog(TOPALi.winMain, true);
            dlg.init(null, data);
            dlg.pack();
            dlg.setLocationRelativeTo(this);
            dlg.setVisible(true);
            if(!dlg.cancelled) {
                CodingRegionAnnotation anno = new CodingRegionAnnotation(dlg.aStart, dlg.aEnd);
                anno.setSeqType(SequenceSetProperties.TYPE_DNA);
                anno.setComment(dlg.aComment);
                anno.setModC1(ModelManager.getInstance().generateModel(dlg.aM1, dlg.aM1Gamma, dlg.aM1Inv));
                anno.setModC2(ModelManager.getInstance().generateModel(dlg.aM2, dlg.aM2Gamma, dlg.aM2Inv));
                anno.setModC3(ModelManager.getInstance().generateModel(dlg.aM3, dlg.aM3Gamma, dlg.aM3Inv));
                data.getAnnotations().add(anno);
                setData(data);
                ProjectState.setDataChanged();
            }
        }
    }//GEN-LAST:event_bNewActionPerformed

    private void bEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditActionPerformed
        Annotation anno = (Annotation)annoList.getSelectedValue();
        
        if(anno!=null) {
	        String type = (String)annoTypeList.getSelectedItem();
	        if(type.equals("Partitions")) {
	            EditPartAnnoDialog dlg = new EditPartAnnoDialog(TOPALi.winMain, true);
	            dlg.setAnnotation((PartitionAnnotation)anno, data);
	            dlg.pack();
	            dlg.setLocationRelativeTo(this);
	            dlg.setVisible(true);
	            
	            if(!dlg.cancelled) {
	            	anno.setSeqType(dlg.aType);
	                anno.setStart(dlg.aStart);
	                anno.setEnd(dlg.aEnd);
	                anno.setComment(dlg.aComment);
	                if(dlg.aModel!=null)
	                	((PartitionAnnotation)anno).setModel(ModelManager.getInstance().generateModel(dlg.aModel, dlg.aGamma, dlg.aInv));
	                setData(data);
	                ProjectState.setDataChanged();
	            }
	        } else if(type.equals("Coding Regions")) {
	        	EditCodRegDialog dlg = new EditCodRegDialog(TOPALi.winMain, true);
	            dlg.init((CodingRegionAnnotation)anno, data);
	            dlg.pack();
	            dlg.setLocationRelativeTo(this);
	            dlg.setVisible(true);
	            if(!dlg.cancelled) {
	                anno.setStart(dlg.aStart);
	                anno.setEnd(dlg.aEnd);
	                anno.setComment(dlg.aComment);
	                ((CodingRegionAnnotation)anno).setModC1(ModelManager.getInstance().generateModel(dlg.aM1, dlg.aM1Gamma, dlg.aM1Inv));
	                ((CodingRegionAnnotation)anno).setModC2(ModelManager.getInstance().generateModel(dlg.aM2, dlg.aM2Gamma, dlg.aM2Inv));
	                ((CodingRegionAnnotation)anno).setModC3(ModelManager.getInstance().generateModel(dlg.aM3, dlg.aM3Gamma, dlg.aM3Inv));
	                setData(data);
	                ProjectState.setDataChanged();
	            }
	        }
        }
        
    }//GEN-LAST:event_bEditActionPerformed

    private void bRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveActionPerformed
        int index = annoList.getSelectedIndex();
        if(index>=0) {
	        List<Annotation> annos = data.getAnnotations().getAnnotations(annoType);
	        Annotation anno = annos.get(index);
	        data.getAnnotations().remove(anno);
	        
	        if(annos.size()==1) {
	        	bRemove.setEnabled(false);
	        	bRemoveAll.setEnabled(false);
	        }
	        treePreviewPanel.clearTree();
	        data.setActiveRegion(-1, -1);
	        WinMain.repaintDisplay();
	        setData(data);
	        ProjectState.setDataChanged();
        }
    }//GEN-LAST:event_bRemoveActionPerformed

    private void bRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveAllActionPerformed
        data.getAnnotations().removeAll(data.getAnnotations().getAnnotations(annoType));
        bRemove.setEnabled(false);
        bRemoveAll.setEnabled(false);
        treePreviewPanel.clearTree();
        data.setActiveRegion(-1, -1);
        WinMain.repaintDisplay();
        setData(data);
        ProjectState.setDataChanged();
    }//GEN-LAST:event_bRemoveAllActionPerformed

    private void bHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHelpActionPerformed
        
    }//GEN-LAST:event_bHelpActionPerformed

    private void bCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCloseActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_bCloseActionPerformed

    private void annoListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_annoListValueChanged
        int index = annoList.getSelectedIndex();
        if(index>=0) {
            List<Annotation> annos = data.getAnnotations().getAnnotations(annoType);
            Annotation anno = annos.get(index);
            bEdit.setEnabled(true);
            bRemove.setEnabled(true);
            data.setActiveRegion(anno.getStart(), anno.getEnd());
            WinMain.repaintDisplay();
            treePreviewPanel.createTree(anno);
        }
    }//GEN-LAST:event_annoListValueChanged

    private void disableTreePrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableTreePrevActionPerformed
        treePreviewPanel.setEnabled(!disableTreePrev.isSelected());
    }//GEN-LAST:event_disableTreePrevActionPerformed

    private void bExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExportActionPerformed
    	List<Annotation> annos = new ArrayList<Annotation>();
    	int[] indices = annoList.getSelectedIndices();
    	for(int i=0; i<indices.length; i++) {
    		annos.add((Annotation)annoList.getModel().getElementAt(i));
    	}
    	new ExportDialog(TOPALi.winMain, data, annos);
    }//GEN-LAST:event_bExportActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CopyOfAnnotationDialog dialog = new CopyOfAnnotationDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList annoList;
    private javax.swing.JComboBox annoTypeList;
    private javax.swing.JButton bClose;
    private javax.swing.JButton bEdit;
    private javax.swing.JButton bExport;
    private javax.swing.JButton bHelp;
    private javax.swing.JButton bNew;
    private javax.swing.JButton bRemove;
    private javax.swing.JButton bRemoveAll;
    private javax.swing.JCheckBox disableTreePrev;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private topali.gui.dialog.annotation.TreePreviewPanel treePreviewPanel;
    // End of variables declaration//GEN-END:variables
    
}
