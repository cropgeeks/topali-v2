// (C) 2003-2005 Iain Milne
//
// This package may be distributed under the
// terms of the GNU General Public License (GPL)

package topali.cluster.dss;

import java.io.*;

import pal.distance.*;
import pal.tree.*;

import topali.cluster.*;
import topali.data.*;

class RunFitch
{
	private DSSResult result;
	
	private boolean optimize = true;
	private double ss;
	
	RunFitch(DSSResult result, boolean optimize)
	{
		this.result = result;
		this.optimize = optimize;
	}
		
	private void cleanDirectory(File wrkDir)
	{
		new File(wrkDir, "outfile").delete();
		new File(wrkDir, "outtree").delete();
	}
	
	// TODO: We don't actually *get* the tree in this method anymore - only the
	// SumsOfSquares value is read
	Tree getTree(File wrkDir, Tree tree, DistanceMatrix distance)
		throws Exception
	{				
		cleanDirectory(wrkDir);
		
		// Write out the distance matrix
		BufferedWriter out = new BufferedWriter(
			new FileWriter(new File(wrkDir, "infile")));
		out.write(distance.toString());
		out.close();
			
		// Write out the tree
		out = new BufferedWriter(new FileWriter(new File(wrkDir, "intree")));
		out.write(tree.toString());
		out.close();
		
		// Run fitch
		runFitch(wrkDir);
				
		// Get the sum of sqaures
		BufferedReader in = new BufferedReader(
			new FileReader(new File(wrkDir, "outfile")), 2048);
			
		String str = in.readLine();
		while (str != null)
		{
			if (str.startsWith("Sum of squares"))
			{
				try { ss = Double.parseDouble(str.substring(18)); }
				catch (Exception e) {}
			}
			
			str = in.readLine();
		}
			
		in.close();

		return null;
	}
	
	
	double getSS()
		{ return ss; }
		
	private void runFitch(File wrkDir)
		throws Exception
	{		
		ProcessBuilder pb = new ProcessBuilder(result.fitchPath);
		pb.directory(wrkDir);
		pb.redirectErrorStream(true);
		
		Process proc = pb.start();
		
		PrintWriter writer = new PrintWriter(new OutputStreamWriter(
			proc.getOutputStream()));
		new StreamCatcher(proc.getInputStream(), false);
		
		writer.println("u");		// Search for best tree = No
		if (!optimize)
			writer.println("n");	// Use lengths from user trees = Yes
		writer.println("p");		// Power...
		writer.println("0");		// 0
		
		writer.println("y");
		writer.close();
		
		try
		{
			proc.waitFor();
			proc.destroy();
		}
		catch (Exception e) {
			System.out.println(e);
		}
	}
}
